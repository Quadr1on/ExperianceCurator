#app.py

from flask import Flask
from models import db
from routes import main
from config import Config

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    # Initialize extensions
    db.init_app(app)
    
    # Register blueprints
    app.register_blueprint(main)
    
    return app

def init_db():
    app = create_app()
    with app.app_context():
        # Drop all tables first to avoid any existing table issues
        db.drop_all()
        # Create all tables
        db.create_all()
        
        # Add sample data
        from models import City, Experience
        
        # Add sample cities
        nyc = City(name='New York City', state='New York', country='USA')
        brooklyn = City(name='Brooklyn', state='New York', country='USA')
        queens = City(name='Queens', state='New York', country='USA')
        
        db.session.add_all([nyc, brooklyn, queens])
        db.session.commit()  # Commit cities first
        
        # Add sample experiences for NYC
        experiences = [
            Experience(
                name='Street Art Festival',
                type='local_event',
                description='Annual street art festival featuring local artists',
                city_id=nyc.id,
                details={'time': 'Today', 'location': 'Downtown'}
            ),
            Experience(
                name='Secret Garden Cafe',
                type='hidden_gem',
                description='Hidden cafe with amazing atmosphere',
                city_id=nyc.id,
                details={'type': 'Restaurant', 'price_range': '$$'}
            ),
            Experience(
                name='Historical Downtown',
                type='walking_tour',
                description='Explore the historic downtown area',
                city_id=nyc.id,
                details={'distance': '2.5 miles', 'duration': '2 hours'}
            )
        ]
        db.session.add_all(experiences)
        db.session.commit()

if __name__ == '__main__':
    # Initialize the database first
    init_db()
    
    # Then run the app
    app = create_app()
    app.run(debug=True)


#models.py
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class City(db.Model):
    _tablename_ = 'cities'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    state = db.Column(db.String(100), nullable=False)
    country = db.Column(db.String(100), nullable=False)
    experiences = db.relationship('Experience', backref='city', lazy=True, cascade="all, delete-orphan")
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def _repr_(self):
        return f'<City {self.name}>'

class Experience(db.Model):
    _tablename_ = 'experiences'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    type = db.Column(db.String(50), nullable=False)  # 'hidden_gem', 'local_event', 'walking_tour'
    description = db.Column(db.Text)
    city_id = db.Column(db.Integer, db.ForeignKey('cities.id', ondelete='CASCADE'), nullable=False)
    details = db.Column(db.JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    active = db.Column(db.Boolean, default=True)

    def _repr_(self):
        return f'<Experience {self.name}>'

#routes.py
from flask import Blueprint, render_template, jsonify, request
from models import db, City, Experience

main = Blueprint('main', __name__)

@main.route('/')
def index():
    cities = City.query.all()
    return render_template('index.html', cities=cities)

@main.route('/api/experiences/<city_id>')
def get_experiences(city_id):
    experiences = Experience.query.filter_by(city_id=city_id, active=True).all()
    
    # Organize experiences by type
    organized_experiences = {
        'events': [],
        'gems': [],
        'tours': []
    }
    
    for exp in experiences:
        if exp.type == 'local_event':
            organized_experiences['events'].append({
                'name': exp.name,
                'time': exp.details.get('time', 'TBD')
            })
        elif exp.type == 'hidden_gem':
            organized_experiences['gems'].append({
                'name': exp.name,
                'type': exp.details.get('type', 'Place')
            })
        elif exp.type == 'walking_tour':
            organized_experiences['tours'].append({
                'name': exp.name,
                'distance': exp.details.get('distance', 'Unknown')
            })
    
    return jsonify(organized_experiences)

@main.route('/api/search')
def search_experiences():
    query = request.args.get('q', '').lower()
    city_id = request.args.get('city_id')
    
    experiences = Experience.query.filter(
        Experience.city_id == city_id,
        Experience.active == True,
        Experience.name.ilike(f'%{query}%')
    ).all()
    
    results = [{
        'name': exp.name,
        'type': exp.type,
        'details': exp.details
    } for exp in experiences]
    
    return jsonify(results)


#configs.py

import os

class Config:
    # Database configuration
    basedir = os.path.abspath(os.path.dirname(__file__))
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'local_experiences.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Secret key for session management
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key-here'

#templates/index.html
{% extends "base.html" %}

{% block content %}
<div class="max-w-6xl space-y-8">
    <!-- Hero Section -->
    <header class="header">
        <h1>Discover Your City's Hidden Gems</h1>
        <div class="search-container">
            <i data-lucide="search" class="text-gray-500"></i>
            <input type="text" id="searchInput" placeholder="Search experiences, places, or events...">
            <i data-lucide="map-pin" class="text-gray-500"></i>
            <select id="locationSelect">
                {% for city in cities %}
                <option value="{{ city.id }}">{{ city.name }}</option>
                {% endfor %}
            </select>
        </div>
    </header>

    <!-- Feature Grid -->
    <div class="grid">
        <!-- Events Calendar -->
        <div class="card">
            <div class="card-header">
                <i data-lucide="calendar" class="icon icon-blue"></i>
                <h2>Local Events</h2>
            </div>
            <ul class="card-list" id="eventsList"></ul>
        </div>

        <!-- Hidden Gems -->
        <div class="card">
            <div class="card-header">
                <i data-lucide="star" class="icon icon-yellow"></i>
                <h2>Hidden Gems</h2>
            </div>
            <ul class="card-list" id="gemsList"></ul>
        </div>

        <!-- Walking Tours -->
        <div class="card">
            <div class="card-header">
                <i data-lucide="navigation-2" class="icon icon-green"></i>
                <h2>Walking Tours</h2>
            </div>
            <ul class="card-list" id="toursList"></ul>
        </div>
    </div>
</div>
{% endblock %}


#static/base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Local Experience Curator</title>
    <script src="https://unpkg.com/lucide@latest"></script>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    {% block content %}{% endblock %}
    
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>



#statics/css/style.css

/* Base Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

body {
    background-color: #f3f4f6;
}

/* Layout */
.max-w-6xl {
    max-width: 72rem;
    margin: 0 auto;
    padding: 1.5rem;
}

.space-y-8 > * + * {
    margin-top: 2rem;
}

/* Header/Hero Section */
.header {
    background-color: #dbeafe;
    border-radius: 0.5rem;
    padding: 2rem;
    text-align: center;
    position: relative;
    margin-bottom: 2rem;
}

.header h1 {
    font-size: 2.25rem;
    font-weight: bold;
    margin-bottom: 1rem;
    color: #1f2937;
}

/* Search Container */
.search-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    background-color: white;
    padding: 1rem;
    border-radius: 9999px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    max-width: 32rem;
    margin: 0 auto;
}

.search-container input {
    flex: 1;
    border: none;
    outline: none;
    font-size: 1rem;
    padding: 0.5rem;
}

.search-container select {
    border: none;
    outline: none;
    color: #4b5563;
    font-size: 1rem;
    padding: 0.5rem;
    background-color: transparent;
    cursor: pointer;
}

/* Grid Layout */
.grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
}

@media (max-width: 1024px) {
    .grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 768px) {
    .grid {
        grid-template-columns: 1fr;
    }
    
    .header h1 {
        font-size: 1.75rem;
    }
    
    .search-container {
        flex-direction: column;
        border-radius: 0.5rem;
    }
    
    .search-container input,
    .search-container select {
        width: 100%;
        text-align: center;
    }
}

/* Card Styles */
.card {
    background-color: white;
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.card-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #f3f4f6;
}

.card-header h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
}

/* List Styles */
.card-list {
    list-style: none;
}

.list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid #e5e7eb;
    transition: all 0.3s ease;
}

.list-item:last-child {
    border-bottom: none;
}

.list-item:hover {
    background-color: #f9fafb;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
}

/* Typography */
.text-sm {
    font-size: 0.875rem;
}

.text-gray-500 {
    color: #6b7280;
}

/* Icon Styles */
.icon {
    width: 1.25rem;
    height: 1.25rem;
}

.icon-blue {
    color: #3b82f6;
}

.icon-yellow {
    color: #eab308;
}

.icon-green {
    color: #22c55e;
}

.icon-red {
    color: #ef4444;
}

/* Animation */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.list-item {
    animation: fadeIn 0.3s ease-out;
}

/* Utility Classes */
.hidden {
    display: none;
}

/* Loading State */
.loading {
    opacity: 0.5;
    pointer-events: none;
}

/* Empty State */
.empty-state {
    text-align: center;
    padding: 2rem;
    color: #6b7280;
}

/* Error State */
.error-state {
    text-align: center;
    padding: 2rem;
    color: #ef4444;
}

/* Success Animation */
@keyframes success-fade {
    0% {
        background-color: #86efac;
    }
    100% {
        background-color: transparent;
    }
}

.success-highlight {
    animation: success-fade 2s ease-out;
}

/* Tooltip */
[data-tooltip] {
    position: relative;
    cursor: help;
}

[data-tooltip]:before {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.5rem;
    background-color: #1f2937;
    color: white;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
}

[data-tooltip]:hover:before {
    opacity: 1;
    visibility: visible;
}

/* Focus States */
input:focus, select:focus {
    outline: 2px solid #3b82f6;
    outline-offset: -2px;
}

/* Active States */
.list-item.active {
    background-color: #dbeafe;
    border-radius: 0.25rem;
}

#static/js/main.js

// Initialize Lucide icons
lucide.createIcons();

// Function to load experiences for a city
async function loadExperiences(cityId) {
    try {
        const response = await fetch(`/api/experiences/${cityId}`);
        const data = await response.json();
        
        // Populate Events
        const eventsList = document.getElementById('eventsList');
        eventsList.innerHTML = data.events.map(event => `
            <li class="list-item">
                <span>${event.name}</span>
                <span class="text-sm text-gray-500">${event.time}</span>
            </li>
        `).join('');

        // Populate Gems
        const gemsList = document.getElementById('gemsList');
        gemsList.innerHTML = data.gems.map(gem => `
            <li class="list-item">
                <span>${gem.name}</span>
                <i data-lucide="heart" class="icon icon-red"></i>
            </li>
        `).join('');

        // Populate Tours
        const toursList = document.getElementById('toursList');
        toursList.innerHTML = data.tours.map(tour => `
            <li class="list-item">
                <span>${tour.name}</span>
                <span class="text-sm text-gray-500">${tour.distance}</span>
            </li>
        `).join('');

        // Reinitialize Lucide icons
        lucide.createIcons();
    } catch (error) {
        console.error('Error loading experiences:', error);
    }
}

// Search functionality
async function handleSearch() {
    const searchInput = document.getElementById('searchInput');
    const locationSelect = document.getElementById('locationSelect');
    const searchTerm = searchInput.value.trim();
    const cityId = locationSelect.value;

    if (searchTerm === '') {
        loadExperiences(cityId);
        return;
    }

    try {
        const response = await fetch(`/api/search?q= ${searchTerm} &city_id = ${cityId}`);
        const results = await response.json();
        
        // Hide all items initially
        document.querySelectorAll('.list-item').forEach(item => {
            item.classList.add('hidden');
        });

        // Show matching items
        results.forEach(result => {
            const items = document.querySelectorAll('.list-item');
            items.forEach(item => {
                if (item.querySelector('span:first-child').textContent === result.name) {
                    item.classList.remove('hidden');
                }
            });
        });
    } catch (error) {
        console.error('Error searching experiences:', error);
    }
}

// Initialize the page
document.addEventListener('DOMContentLoaded', () => {
    const locationSelect = document.getElementById('locationSelect');
    
    // Load initial experiences
    loadExperiences(locationSelect.value);
    
    // Add event listeners
    document.getElementById('searchInput').addEventListener('input', handleSearch);
    locationSelect.addEventListener('change', (e) => loadExperiences(e.target.value));
});